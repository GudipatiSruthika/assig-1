#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_STACK_SIZE 100
int isOperator(char ch) {
return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}
int precedence(char ch) {
if (ch == '^')
return 3;
else if (ch == '*' || ch == '/')
return 2;
else if (ch == '+' || ch == '-')
return 1;
else
return 0; 
}
void infixToPostfix(char infix[], char postfix[]) {
char stack[MAX_STACK_SIZE];
int top = -1;
int i, j = 0;
for (i = 0; infix[i] != '\0'; i++) {
char ch = infix[i];
if (isalnum(ch)) {
postfix[j++] = ch; 
} else if (ch == '(') {
stack[++top] = ch; 
} else if (ch == ')') {
while (top >= 0 && stack[top] != '(') {
postfix[j++] = stack[top--]; 
}
if (top >= 0 && stack[top] == '(') {
top--; 
}
} else {
while (top >= 0 && precedence(stack[top]) >= precedence(ch)) {
postfix[j++] = stack[top--]; 
}
stack[++top] = ch; 
}
}
while (top >= 0) {
postfix[j++] = stack[top--];
}
postfix[j] = '\0'; 
}
int main() {
char infix[MAX_STACK_SIZE];
char postfix[MAX_STACK_SIZE];
printf("Enter an infix expression: ");
gets(infix); 
infixToPostfix(infix, postfix);
printf("Postfix expression: %s\n", postfix);
return 0;
}
Write a program to evaluate the postfix notation using stack
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_STACK_SIZE 100
struct Stack{
int top;
int data[MAX_STACK_SIZE];
};
void initialize(struct Stack *stack) {
stack->top = -1;
}
int isEmpty(struct Stack *stack) {
return stack->top == -1;
}
void push(struct Stack *stack, int value) {
if (stack->top == MAX_STACK_SIZE - 1) {
printf("Stack Overflow\n");
exit(1); 
}
stack->data[++(stack->top)] = value;
}

int pop(struct Stack *stack) {
if (isEmpty(stack)) {
printf("Stack Underflow\n");
exit(1); 
}
return stack->data[(stack->top)--];
int evaluatePostfix(char postfix[]) {
struct Stack stack;
initialize(&stack);
int i, operand1, operand2;
for (i = 0; postfix[i] != '\0'; i++) {
char ch = postfix[i];
if (isdigit(ch)) {
push(&stack, ch - '0');
} else {
operand2 = pop(&stack);
operand1 = pop(&stack);
switch (ch) {
case '+':
push(&stack, operand1 + operand2);
break;
case '-':
push(&stack, operand1 - operand2);
break;
casepush(&stack, operand1 * operand2);
break;
case '/':
if (operand2 != 0) {
push(&stack, operand1 / operand2);
} else {
printf("Division by zero\n");
exit(1); 
}
break;
default:
printf("Invalid operator in postfix expression\n");
exit(1); // Exit the program for invalid operator
}
}
}
if (!isEmpty(&stack)) {
return pop(&stack);
} else {
printf("Postfix expression is empty\n");
exit(1); // Exit the program for an empty postfix expression
}
}
int main() {
char postfix[MAX_STACK_SIZE];
printf("Enter a postfix expression: ");
gets(postfix); 
int result = evaluatePostfix(postfix);
printf("Result: %d\n", result);
return 0;
}
